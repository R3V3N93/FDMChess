strict namespace CHESS{
strict namespace CLASS{

enum CLASS_CONSTS : int
{
    CONST_PAWN_PROMOTION_POINT = 18,
    CONST_KING_POINT = -1,

    CLASS_EMPTY = 0,
    CLASS_PAWN = 1,
    CLASS_KNIGHT = 2,
    CLASS_BISHOP = 3,
    CLASS_ROOK = 4,
    CLASS_QUEEN = 5,
    CLASS_KING = 6
};

enum CLASS_DESCRIPTION : str
{
    DESCRIPTION_PAWN = "
    Starts with \ckBasic Weapons\c-\n
    Pawns can be promoted to \ckQueen\c- by scoring \ck18 points!\c-",
    DESCRIPTION_KNIGHT = "
    Starts with \cka Shotgun\c-\n
    Knight can \ckJump\c- to cross \ckHoles and High Positions!\c-",
    DESCRIPTION_BISHOP = "
    Starts with \cka Sniper rifle\c-\n
    Bishop can \ckBecome Invisible for Short Amount of Time\c- by \ckPressing Jump Button\c-",
    DESCRIPTION_ROOK = "
    Starts with \ckVergil's Yamato\c-\n
    Rook has \ckHigh Speed\c-!",
    DESCRIPTION_QUEEN = "
    Starts with \ckan Minigun\c-\n
    Queens are the \ckMost Powerful Being Here\c-",
    DESCRIPTION_KING = "
    \ckGUN GAME MODE!\c-\n
    \ckKing's score gets expensive kill by kill!\c-"
};

struct ClassT
{
    int health;
    fixed jump;
    fixed speed;
    // if CONST_KING_POINT(-1), it gets its own point modifier
    int point;
    
};

ClassT class[7] = 
{
{-1, 0.0, -1.0, -1},
{100, 0.0, 1.0, 1},
{150, 3.0, 1.0, 3},
{150, 0.0, 1.0, 2},
{175, 1.0, 2.5, 4},
{250, 0.0, 1.0, 5},
{125, 0.0, 1.0, CONST_KING_POINT}
};

struct ClassStringT
{
    str name;
    // if this is 'GUNGAME'(king's selection), this class gets gungame option
    str startWeapon;
    str description;
};

// TODO : integrate this with ClassT once TDRR fixes the shit
ClassStringT classString[7] = 
{
{"EMPTY", "EMPTY", "WHY ARE YOU HERE"},
{"Pawn", "KUROJI_Sci_Pistol", DESCRIPTION_PAWN},
{"Knight", "SpasShotgun12", DESCRIPTION_KNIGHT},
{"Bishop", "CS16_AWP", DESCRIPTION_BISHOP},
{"Rook", "Yamato", DESCRIPTION_ROOK},
{"Queen", "KUROJI_Sci_Chaingun", DESCRIPTION_QUEEN},
{"King"/*gg*/, "GUNGAME", DESCRIPTION_KING},
};



int GetKingPoint(int pnum)
{
    if(players[pnum].class != CHESS::CLASS::CLASS_KING)
        return -1;

    if(players[pnum].score <= 5)
        return players[pnum].score;
    else
        return 5;

    return 1;
}

str gungame[15] = {
    "UT_Enforcer", 
    "USPS", 
    "CS163D_HG_Glock",
    "RailRifleGun", 
    "CV47", 
    "Model1887", 
    "CS163D_SG_M3", 
    "KUROJI_Sci_Shotgun", 
    "CS163D_SG_XM1014",
    "Raygun", 
    "KUROJI_Sci_Chaingun", 
    "Ranch90", 
    "SKITTLES_BFG9000", 
    "CobraStaff", 
    "CS163D_MG_M249"
    };


bool BecomeClass(int classnum, bool showDesc = false)
{
    int tid = players[PlayerNumber()].tid;

    if(showDesc)
    {
        SetFont("CW_FONT2");
        SetHUDSize(1440, 1080, false);
        HudMessage(s:("You are "+classString[classnum].name + "!\n" + classString[classnum].description +(classnum != CLASS::CLASS_KING ? "\nYou are " + str(class[classnum].point) + " scores worth" : ""));HUDMSG_FADEOUT, 2, CR_UNTRANSLATED, 720.4, 480.0, 10.0, 1.0);
    }
    BCSUTILS::SetActorSpawnHealth(tid, class[classnum].health);
    BCSUTILS::SetActorHealth(tid, class[classnum].health);
    BCSUTILS::SetActorSpeed(tid, class[classnum].speed);
    BCSUTILS::SetActorJumpZ(tid, (fixed)class[classnum].jump * 8.0);
    
    ClearActorInventory(tid);

    players[PlayerNumber()].class = classnum;

    if(classString[classnum].startWeapon != "GUNGAME")
        GiveActorInventory(tid, classString[classnum].startWeapon, 1);
    else
        GiveActorInventory(tid, (players[PlayerNumber()].score > 14 ? gungame[14] : gungame[players[PlayerNumber()].score]), 1);

    //SetPlayerSkin(PlayerNumber(), (players[PlayerNumber()].team == CHESS::TEAM_BLACK ? "Black" : "White") + CHESS::CLASS::classString[players[PlayerNumber()].class].name, true);
    BCSUTILS::SetActorRenderStyle(tid, STYLE_Translucent);

    LogDebug(__FUNCTION__ + " : set player " + str(PlayerNumber()) + "'s class as " + classString[classnum].name + "\nInformation:\n  health : " + str(class[classnum].health) + "\n  speed : " + str(class[classnum].speed) + "\n  point : " + str(class[classnum].point) + "\n  startWeapon : " + classString[classnum].startWeapon + "\n  canJump : " + str(class[classnum].jump));

    return true;
}

}
}